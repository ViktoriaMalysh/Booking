{"ast":null,"code":"// import \"../App.css\";\n// import MyAccounts from \"./myAccounts\";\n// import React, { useEffect, useState } from \"react\";\n// import { Table, Button, Spinner, Col, Form, Row } from \"react-bootstrap\";\n// import { useSelector, useDispatch, connect } from \"react-redux\";\n// import { NAME_PROJECT, REQUESTED_SUCCEEDED_CLOSE_PROJECT, SHOW_PROJECT } from \"../redux/types\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import { fetchShowProject, fetchSearchProject, fetchDeleteProject } from \"../redux/actionProjects\";\n// function MyTickets() {\n//   const [deleteT, setDelete] = useState(false);\n//   const dispatch = useDispatch();\n//   const store = useSelector((state) => state);\n//   const loading = useSelector((state) => state.app.loading);\n//   useEffect(() => {\n//     dispatch({ type: SHOW_PROJECT, payload: [{}] });\n//     dispatch(fetchShowProject(store.users.userId));\n//     setTimeout(() => {\n//       dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//     }, 1000);\n//   }, []);\n//   useEffect(() => {\n//     if (store.projects.delete) {\n//       dispatch({ type: SHOW_PROJECT, payload: [{}] });\n//       dispatch(fetchShowProject(store.users.userId));\n//       setTimeout(() => {\n//         dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//       }, 1000);\n//     }\n//   }, [store.projects.delete]);\n//   useEffect(() => {\n//     if (store.projects.nameProject === searchProject) {\n//       dispatch(fetchSearchProject(store.projects.nameProject));\n//       setTimeout(() => {\n//         dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//       }, 1000);\n//     }\n//   }, [store.projects.nameProject]);\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     dispatch({ type: NAME_PROJECT, payload: searchProject });\n//   };\n//   function DeleteProject(id) {\n//     dispatch(fetchDeleteProject(id));\n//     dispatch(fetchShowProject(store.users.userId));\n//     dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//   }\n//   if (loading) {\n//     return (\n//       <div className=\"form1111\">\n//         <Spinner animation=\"border\" variant=\"danger\" role=\"status\"></Spinner>\n//       </div>\n//     );\n//   }\n//   return (\n//     <div className=\"form111\">\n//     <Form onSubmit={handleSubmit}>\n//       <Row className=\"mb-3\">\n//         <Form.Label>\n//           <h4>\n//             <i>Enter the name of project:</i>\n//           </h4>\n//         </Form.Label>\n//         <Form.Group\n//           as={Col}\n//           md=\"4\"\n//           controlId=\"formGridAddress1\"\n//           onChange={(e) => setSearchProject(e.target.value)}\n//         >\n//           <Form.Control placeholder=\"Enter project name\" />\n//         </Form.Group>\n//       </Row>\n//       <Button variant=\"danger\" type=\"submit\">\n//         Find\n//       </Button>{\" \"}\n//       <br></br> <br></br>\n//       <Table striped bordered hover>\n//         <thead>\n//           <tr>\n//             <th>ID</th>\n//             <th>PROJECT NAME</th>\n//             <th>MINUTES</th>\n//             <th>DELETE</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {store.projects.showProject.map((item) => (\n//             <tr key={item.id}>\n//               <td>{item.id}</td>\n//               <td>{item.projectName}</td>\n//               <td>{item.h}</td>\n//               <td>\n//                 <Button\n//                   variant=\"danger\"\n//                   type=\"submit\"\n//                   onClick={() => DeleteProject(item.id, item.projectName)}\n//                 >\n//                   X\n//                 </Button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </Table>\n//     </Form>\n//   </div>\n// );\n// }\n// const mapDispatchToProps = {\n//   fetchShowProject,\n//   fetchSearchProject,\n//   fetchDeleteProject,\n// };\n// function mapStateToProps(state) {\n//   return { store: state };\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(MyTickets);","map":{"version":3,"sources":["/app/src/users/myProjects.js"],"names":[],"mappingssourcesContent":["// import \"../App.css\";\n// import MyAccounts from \"./myAccounts\";\n// import React, { useEffect, useState } from \"react\";\n// import { Table, Button, Spinner, Col, Form, Row } from \"react-bootstrap\";\n// import { useSelector, useDispatch, connect } from \"react-redux\";\n// import { NAME_PROJECT, REQUESTED_SUCCEEDED_CLOSE_PROJECT, SHOW_PROJECT } from \"../redux/types\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import { fetchShowProject, fetchSearchProject, fetchDeleteProject } from \"../redux/actionProjects\";\n\n\n// function MyTickets() {\n//   const [deleteT, setDelete] = useState(false);\n\n//   const dispatch = useDispatch();\n//   const store = useSelector((state) => state);\n//   const loading = useSelector((state) => state.app.loading);\n\n//   useEffect(() => {\n//     dispatch({ type: SHOW_PROJECT, payload: [{}] });\n//     dispatch(fetchShowProject(store.users.userId));\n//     setTimeout(() => {\n//       dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//     }, 1000);\n\n//   }, []);\n\n//   useEffect(() => {\n//     if (store.projects.delete) {\n//       dispatch({ type: SHOW_PROJECT, payload: [{}] });\n//       dispatch(fetchShowProject(store.users.userId));\n//       setTimeout(() => {\n//         dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//       }, 1000);\n//     }\n//   }, [store.projects.delete]);\n\n//   useEffect(() => {\n//     if (store.projects.nameProject === searchProject) {\n//       dispatch(fetchSearchProject(store.projects.nameProject));\n//       setTimeout(() => {\n//         dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//       }, 1000);\n//     }\n//   }, [store.projects.nameProject]);\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     dispatch({ type: NAME_PROJECT, payload: searchProject });\n//   };\n\n//   function DeleteProject(id) {\n//     dispatch(fetchDeleteProject(id));\n//     dispatch(fetchShowProject(store.users.userId));\n//     dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT });\n//   }\n\n//   if (loading) {\n//     return (\n//       <div className=\"form1111\">\n//         <Spinner animation=\"border\" variant=\"danger\" role=\"status\"></Spinner>\n//       </div>\n//     );\n//   }\n\n\n//   return (\n//     <div className=\"form111\">\n//     <Form onSubmit={handleSubmit}>\n//       <Row className=\"mb-3\">\n//         <Form.Label>\n//           <h4>\n//             <i>Enter the name of project:</i>\n//           </h4>\n//         </Form.Label>\n\n//         <Form.Group\n//           as={Col}\n//           md=\"4\"\n//           controlId=\"formGridAddress1\"\n//           onChange={(e) => setSearchProject(e.target.value)}\n//         >\n//           <Form.Control placeholder=\"Enter project name\" />\n//         </Form.Group>\n//       </Row>\n//       <Button variant=\"danger\" type=\"submit\">\n//         Find\n//       </Button>{\" \"}\n//       <br></br> <br></br>\n//       <Table striped bordered hover>\n//         <thead>\n//           <tr>\n//             <th>ID</th>\n//             <th>PROJECT NAME</th>\n//             <th>MINUTES</th>\n//             <th>DELETE</th>\n//           </tr>\n//         </thead>\n\n//         <tbody>\n//           {store.projects.showProject.map((item) => (\n//             <tr key={item.id}>\n//               <td>{item.id}</td>\n//               <td>{item.projectName}</td>\n//               <td>{item.h}</td>\n//               <td>\n//                 <Button\n//                   variant=\"danger\"\n//                   type=\"submit\"\n//                   onClick={() => DeleteProject(item.id, item.projectName)}\n//                 >\n//                   X\n//                 </Button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </Table>\n//     </Form>\n//   </div>\n// );\n  \n\n// }\n\n// const mapDispatchToProps = {\n//   fetchShowProject,\n//   fetchSearchProject,\n//   fetchDeleteProject,\n// };\n\n// function mapStateToProps(state) {\n//   return { store: state };\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(MyTickets);\n"]},"metadata":{},"sourceType":"module"}