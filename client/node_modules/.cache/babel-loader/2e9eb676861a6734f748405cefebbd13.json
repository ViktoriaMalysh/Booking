{"ast":null,"code":"import axios from \"axios\";\nimport { CLEAR_USER, IS_AUTH, REQUESTED_FAILED_USER, REQUESTED_SUCCEEDED_USER, REQUESTED_USER, SHOW_ALERT, USER_EMAIL, USER_ID, USER_NAME, USER_ROLE, USER_SURNAME } from \"./types\";\n\nconst requestUser = () => {\n  return {\n    type: REQUESTED_USER\n  };\n};\n\nconst requestSuccessUser = data => {\n  return {\n    type: REQUESTED_SUCCEEDED_USER\n  };\n};\n\nconst requestErrorUser = (err, message) => {\n  return dispatch => {\n    console.log('Error:', err);\n    dispatch({\n      type: REQUESTED_FAILED_USER\n    });\n    dispatch(alert(message));\n  };\n};\n\nconst alert = message => {\n  return dispatch => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: message\n    });\n    setTimeout(() => {\n      dispatch({\n        type: SHOW_ALERT,\n        payload: false\n      });\n    }, 1200);\n  };\n};\n\nexport const fetchVerifyToken = token => {\n  return dispatch => {\n    dispatch(requestUser());\n    axios.post(`http://localhost:8080/auth/verify1`, {}, {\n      headers: {\n        'authorization': token\n      }\n    }).then(res => {\n      console.log('data', res.data);\n      localStorage.setItem('token', res.data.token);\n      dispatch({\n        type: IS_AUTH,\n        payload: true\n      });\n      dispatch({\n        type: USER_ID,\n        payload: res.data.id\n      });\n      dispatch({\n        type: USER_NAME,\n        payload: res.data.name\n      });\n      dispatch({\n        type: USER_SURNAME,\n        payload: res.data.surname\n      });\n      dispatch({\n        type: USER_EMAIL,\n        payload: res.data.email\n      });\n      dispatch({\n        type: USER_ROLE,\n        payload: res.data.role\n      });\n    }).then(data => dispatch(requestSuccessUser(data)), err => dispatch(requestErrorUser(err)));\n  };\n};\nexport const fetchAuth = user => {\n  return dispatch => {\n    dispatch(requestUser());\n    axios.post(`http://localhost:8080/auth/authentication`, {\n      name: user.name,\n      surname: user.surname,\n      email: user.email,\n      password: user.password\n    }).then(res => {\n      localStorage.setItem('token', res.data.token);\n      dispatch({\n        type: IS_AUTH,\n        payload: true\n      });\n      dispatch({\n        type: USER_ID,\n        payload: res.data.id\n      });\n      dispatch(alert('Authorization was successful!'));\n    }).then(data => dispatch(requestSuccessUser(data)), err => dispatch(requestErrorUser(err, 'Error. Try again')));\n  };\n};\nexport const fetchLogin = user => {\n  return dispatch => {\n    dispatch(requestUser());\n    axios.post(`http://localhost:8080/auth/authorization`, {\n      email: user.email,\n      password: user.password\n    }).then(res => {\n      localStorage.setItem('token', res.data.token);\n      dispatch({\n        type: IS_AUTH,\n        payload: true\n      });\n      dispatch({\n        type: USER_ID,\n        payload: res.data.id\n      });\n      dispatch(alert('Success!'));\n    }).then(data => dispatch(requestSuccessUser(data)), err => dispatch(requestErrorUser(err, 'User not found')));\n  };\n};\nexport const fetchDelete = token => {\n  return dispatch => {\n    dispatch(requestUser());\n    axios.post(`http://localhost:8080/auth/logout`, {}, {\n      headers: {\n        'authorization': token\n      }\n    }).then(res => {\n      localStorage.clear();\n      dispatch({\n        type: IS_AUTH,\n        payload: false\n      });\n      dispatch({\n        type: CLEAR_USER\n      });\n      dispatch(alert('Account has been deleted!'));\n    }).then(data => dispatch(requestSuccessUser(data)), err => dispatch(requestErrorUser(err, 'Error! Account has not been deleted')));\n  };\n}; // export const fetchChangePass = (id, password) => {\n//   return (dispatch) => {\n//     dispatch(requestUser());\n//     axios\n//       .post(`http://localhost:8080/users/pass`, {\n//         id: id,\n//         password: password,\n//       })\n//       .then((res) => {\n//         if (res.data.error) dispatch({ type: ERROR, payload: res.data.error });\n//         else dispatch({ type: FLAG, payload: true });\n//         dispatch(alert(\"Success!\"));\n//       })\n//       .then(\n//         (data) => dispatch(requestSuccessUser(data)),\n//         (err) => dispatch(requestErrorUser(err, \"User not found\"))\n//       );\n//   };\n// };\n// export const fetchChange = (id, name, surname, email, password) => {\n//   return (dispatch) => {\n//     dispatch(requestUser());\n//     axios\n//       .post(`http://localhost:8080/users/changeProfile`, {\n//         id: id,\n//         name: name,\n//         surname: surname,\n//         email: email,\n//         password: password,\n//       })\n//       .then((res) => {\n//         if (res.data.error) dispatch({ type: ERROR, payload: res.data.error });\n//         else dispatch({ type: CHANGE, payload: true });\n//         dispatch(alert(\"Success!\"));\n//       })\n//       .then(\n//         (data) => dispatch(requestSuccessUser(data)),\n//         (err) => dispatch(requestErrorUser(err, \"User not found\"))\n//       );\n//   };\n// };","map":{"version":3,"sources":["/app/src/redux/actionUsers.js"],"names":["axios","CLEAR_USER","IS_AUTH","REQUESTED_FAILED_USER","REQUESTED_SUCCEEDED_USER","REQUESTED_USER","SHOW_ALERT","USER_EMAIL","USER_ID","USER_NAME","USER_ROLE","USER_SURNAME","requestUser","type","requestSuccessUser","data","requestErrorUser","err","message","dispatch","console","log","alert","payload","setTimeout","fetchVerifyToken","token","post","headers","then","res","localStorage","setItem","id","name","surname","email","role","fetchAuth","user","password","fetchLogin","fetchDelete","clear"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { CLEAR_USER, IS_AUTH, REQUESTED_FAILED_USER, REQUESTED_SUCCEEDED_USER, REQUESTED_USER, SHOW_ALERT, USER_EMAIL, USER_ID, USER_NAME, USER_ROLE, USER_SURNAME } from \"./types\";\n\nconst requestUser = () => {\n  return { type: REQUESTED_USER };\n};\n\nconst requestSuccessUser = (data) => {\n  return { type: REQUESTED_SUCCEEDED_USER };\n};\n\nconst requestErrorUser = (err, message) => {\n  return (dispatch) => {\n    console.log('Error:', err)\n    dispatch({ type: REQUESTED_FAILED_USER })\n    dispatch(alert(message))\n  };\n};\n\nconst alert = (message) => {\n  return (dispatch) => {\n    dispatch({type: SHOW_ALERT, payload: message})\n    setTimeout(() => {\n      dispatch({type: SHOW_ALERT, payload: false})\n    }, 1200)\n  };\n};\n\nexport const fetchVerifyToken = (token) => {\n  return (dispatch) => {\n    dispatch(requestUser());\n    axios\n      .post(`http://localhost:8080/auth/verify1`, {}, {headers: {'authorization': token}})\n      .then((res) => {\n        console.log('data', res.data)\n        localStorage.setItem('token', res.data.token)\n        dispatch({type: IS_AUTH, payload: true})\n        dispatch({type: USER_ID, payload: res.data.id})\n        dispatch({type: USER_NAME, payload: res.data.name})\n        dispatch({type: USER_SURNAME, payload: res.data.surname})\n        dispatch({type: USER_EMAIL, payload: res.data.email})\n        dispatch({type: USER_ROLE, payload: res.data.role})\n      })\n      .then(\n        (data) => dispatch(requestSuccessUser(data)),\n        (err) => dispatch(requestErrorUser(err))\n      );\n  };\n};\n\nexport const fetchAuth = (user) => {\n  return (dispatch) => {\n    dispatch(requestUser());\n    axios\n      .post(`http://localhost:8080/auth/authentication`, {\n        name: user.name,\n        surname: user.surname,\n        email: user.email,\n        password: user.password\n      })\n      .then((res) => {\n        localStorage.setItem('token', res.data.token)\n        dispatch({type: IS_AUTH, payload: true})\n        dispatch({type: USER_ID, payload: res.data.id})\n        dispatch(alert('Authorization was successful!'))\n      })\n      .then(\n        (data) => dispatch(requestSuccessUser(data)),  \n        (err) => dispatch(requestErrorUser(err, 'Error. Try again'))\n      );\n  };\n};  \n\nexport const fetchLogin = (user) => {\n  return (dispatch) => {\n    dispatch(requestUser());\n    axios\n      .post(`http://localhost:8080/auth/authorization`, {\n        email: user.email,\n        password: user.password\n      })\n      .then((res) => {\n        localStorage.setItem('token', res.data.token)\n        dispatch({type: IS_AUTH, payload: true})\n        dispatch({type: USER_ID, payload: res.data.id})\n        dispatch(alert('Success!'))\n      })\n      .then(\n        (data) => dispatch(requestSuccessUser(data)),\n        (err) => dispatch(requestErrorUser(err, 'User not found')),\n      );\n  };\n};\n\nexport const fetchDelete = (token) => {\n  return (dispatch) => {\n    dispatch(requestUser());\n    axios\n      .post(`http://localhost:8080/auth/logout`, {}, {headers: {'authorization': token}})\n      .then((res) => {\n        localStorage.clear()\n        dispatch({type: IS_AUTH, payload: false})\n        dispatch({type: CLEAR_USER})\n        dispatch(alert('Account has been deleted!'))\n      })\n      .then(\n        (data) => dispatch(requestSuccessUser(data)),\n        (err) => dispatch(requestErrorUser(err, 'Error! Account has not been deleted')),\n      );\n  };\n};\n\n// export const fetchChangePass = (id, password) => {\n//   return (dispatch) => {\n//     dispatch(requestUser());\n//     axios\n//       .post(`http://localhost:8080/users/pass`, {\n//         id: id,\n//         password: password,\n//       })\n//       .then((res) => {\n//         if (res.data.error) dispatch({ type: ERROR, payload: res.data.error });\n//         else dispatch({ type: FLAG, payload: true });\n\n//         dispatch(alert(\"Success!\"));\n//       })\n//       .then(\n//         (data) => dispatch(requestSuccessUser(data)),\n//         (err) => dispatch(requestErrorUser(err, \"User not found\"))\n//       );\n//   };\n// };\n\n\n// export const fetchChange = (id, name, surname, email, password) => {\n//   return (dispatch) => {\n//     dispatch(requestUser());\n//     axios\n//       .post(`http://localhost:8080/users/changeProfile`, {\n//         id: id,\n//         name: name,\n//         surname: surname,\n//         email: email,\n//         password: password,\n//       })\n//       .then((res) => {\n//         if (res.data.error) dispatch({ type: ERROR, payload: res.data.error });\n//         else dispatch({ type: CHANGE, payload: true });\n\n//         dispatch(alert(\"Success!\"));\n//       })\n//       .then(\n//         (data) => dispatch(requestSuccessUser(data)),\n//         (err) => dispatch(requestErrorUser(err, \"User not found\"))\n//       );\n//   };\n// };\n\n\n\n"]},"metadata":{},"sourceType":"module"}