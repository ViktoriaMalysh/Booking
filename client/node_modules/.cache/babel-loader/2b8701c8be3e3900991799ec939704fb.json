{"ast":null,"code":"var _jsxFileName = \"/app/src/teamgeist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport DisplayComponent from \"./DisplayComponent\";\nimport BtnComponent from \"./BtnComponent\";\nimport { fetchTime } from \"./redux/actionProjects\";\nimport \"./App.css\";\nimport \"./teamgeist.css\";\nimport { NAME_PROJECT, REQUESTED_SUCCEEDED_CLOSE_PROJECT } from \"./redux/types\";\nimport { useHistory } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [time, setTime] = useState({\n    ms: 0,\n    s: 0,\n    m: 0,\n    h: 0\n  });\n  const [startTime1, setStartTime] = useState(new Date(2019, 0o0, 15, 18, 43, 59).toLocaleTimeString().slice(0, -3));\n  const [interv, setInterv] = useState();\n  const [status, setStatus] = useState(0);\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const store = useSelector(state => state);\n\n  const start = () => {\n    run();\n    setStatus(1);\n    setInterv(setInterval(run, 10));\n    let startTime = new Date();\n    setStartTime(startTime);\n  };\n\n  var updatedMs = time.ms,\n      updatedS = time.s,\n      updatedM = time.m,\n      updatedH = time.h;\n\n  const run = () => {\n    if (updatedM === 60) {\n      updatedH++;\n      updatedM = 0;\n    }\n\n    if (updatedS === 60) {\n      updatedM++;\n      updatedS = 0;\n    }\n\n    if (updatedMs === 100) {\n      updatedS++;\n      updatedMs = 0;\n    }\n\n    updatedMs++;\n    return setTime({\n      ms: updatedMs,\n      s: updatedS,\n      m: updatedM,\n      h: updatedH\n    });\n  };\n\n  const stop = () => {\n    clearInterval(interv);\n    setStatus(2);\n    let end = new Date();\n    const project = {\n      projectName: store.projects.nameProject,\n      id: store.users.userId,\n      start: startTime1,\n      end: end\n    };\n    dispatch(fetchTime(project));\n    setTimeout(() => {\n      dispatch({\n        type: REQUESTED_SUCCEEDED_CLOSE_PROJECT\n      });\n    }, 1000);\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setStatus(0);\n    setTime({\n      ms: 0,\n      s: 0,\n      m: 0,\n      h: 0\n    });\n  };\n\n  const save = () => {\n    // stop();\n    setTimeout(() => {\n      history.push(\"/projects/showProjects\");\n      dispatch({\n        type: NAME_PROJECT,\n        payload: \"\"\n      });\n    }, 1000);\n  };\n\n  const resume = () => start();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form1\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch\",\n      children: [/*#__PURE__*/_jsxDEV(DisplayComponent, {\n        time: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BtnComponent, {\n        status: status,\n        resume: resume,\n        reset: reset,\n        stop: stop,\n        start: start,\n        save: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CfnDDPcL7ZAlEYlH9QmCRzOhMTM=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = App;\nconst mapDispatchToProps = {\n  fetchTime\n};\n\nconst mapStateToProps = state => {\n  return {\n    store: state\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/app/src/teamgeist.js"],"names":["React","useState","useSelector","useDispatch","connect","DisplayComponent","BtnComponent","fetchTime","NAME_PROJECT","REQUESTED_SUCCEEDED_CLOSE_PROJECT","useHistory","App","time","setTime","ms","s","m","h","startTime1","setStartTime","Date","toLocaleTimeString","slice","interv","setInterv","status","setStatus","history","dispatch","store","state","start","run","setInterval","startTime","updatedMs","updatedS","updatedM","updatedH","stop","clearInterval","end","project","projectName","projects","nameProject","id","users","userId","setTimeout","type","reset","save","push","payload","resume","mapDispatchToProps","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport DisplayComponent from \"./DisplayComponent\";\nimport BtnComponent from \"./BtnComponent\";\nimport { fetchTime } from \"./redux/actionProjects\";\nimport \"./App.css\";\nimport \"./teamgeist.css\";\nimport { NAME_PROJECT, REQUESTED_SUCCEEDED_CLOSE_PROJECT } from \"./redux/types\";\nimport { useHistory } from \"react-router\";\n\nfunction App() {\n  const [time, setTime] = useState({ ms: 0, s: 0, m: 0, h: 0 });\n  const [startTime1, setStartTime] = useState(new Date(2019, 0o0, 15, 18, 43, 59).toLocaleTimeString().slice(0, -3));\n  const [interv, setInterv] = useState();\n  const [status, setStatus] = useState(0);\n\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const store = useSelector((state) => state);\n\n  const start = () => {\n    run();\n    setStatus(1);\n    setInterv(setInterval(run, 10));\n    let startTime = new Date();\n    setStartTime(startTime);\n  };\n\n  var updatedMs = time.ms,\n    updatedS = time.s,\n    updatedM = time.m,\n    updatedH = time.h;\n\n  const run = () => {\n    if (updatedM === 60) {\n      updatedH++;\n      updatedM = 0;\n    }\n    if (updatedS === 60) {\n      updatedM++;\n      updatedS = 0;\n    }\n    if (updatedMs === 100) {\n      updatedS++;\n      updatedMs = 0;\n    }\n    updatedMs++;\n    return setTime({ ms: updatedMs, s: updatedS, m: updatedM, h: updatedH });\n  };\n\n  const stop = () => {\n    clearInterval(interv);\n    setStatus(2);\n    let end = new Date();\n    const project = {\n      projectName: store.projects.nameProject,\n      id: store.users.userId,\n      start: startTime1,\n      end: end,\n    };\n    dispatch(fetchTime(project));\n    setTimeout(() => {\n      dispatch({ type: REQUESTED_SUCCEEDED_CLOSE_PROJECT })\n    }, 1000)\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setStatus(0);\n    setTime({ ms: 0, s: 0, m: 0, h: 0 });\n  };\n\n  const save = () => {\n    // stop();\n    setTimeout(() => {\n      history.push(\"/projects/showProjects\");\n      dispatch({ type: NAME_PROJECT, payload: \"\" });\n    }, 1000)\n  };\n\n  const resume = () => start();\n\n  return (\n    <div className=\"form1\">\n      <div className=\"stopwatch\">\n        <DisplayComponent time={time} />\n        <BtnComponent\n          status={status}\n          resume={resume}\n          reset={reset}\n          stop={stop}\n          start={start}\n          save={save}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = {\n  fetchTime,\n};\n\nconst mapStateToProps = (state) => {\n  return { store: state };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\n\n"]},"metadata":{},"sourceType":"module"}