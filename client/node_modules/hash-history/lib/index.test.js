"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mockBrowser = _interopRequireDefault(require("mock-browser"));

var _ = _interopRequireDefault(require("."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

try {
  window;
} catch (e) {
  const MockBrowser = _mockBrowser.default.mocks.MockBrowser;
  global.window = MockBrowser.createWindow();
}

describe('History', () => {
  it('set method', () => {
    const h = new _.default('foo');
    h.set('bar');
    expect(window.location.hash).toEqual('#foo=bar');
  });
  it('get method', () => {
    const h = new _.default('foo');
    h.set('bar');
    expect(h.get()).toEqual('bar');
  });
  it('get from previously set url', () => {
    window.location.href = 'http://localhost/#foo=bar2';
    const h = new _.default('foo');
    expect(h.get()).toEqual('bar2');
  });
  it('fires a change event when the right part of the url changes', done => {
    window.location.href = 'http://localhost/#foo=bar2';
    const spy = jasmine.createSpy('spy');
    const h = new _.default('foo').on('change', spy);
    setTimeout(() => {
      window.location.href = 'http://localhost/#foo=bar99';
      setTimeout(() => {
        expect(spy.calls.count()).toEqual(1);
        done();
      }, 20);
    }, 20);
  });
  it('does not fire a change event when an irrelevant part of the url changes', done => {
    window.location.href = 'about:blank#foo=1&bar=2';
    const spy = jasmine.createSpy('spy');
    const h = new _.default('foo').on('change', spy);
    setTimeout(() => {
      window.location.href = 'aboute:blank#foo=1&bar=3';
      setTimeout(() => {
        expect(spy.calls.count()).toEqual(0);
        done();
      }, 20);
    }, 20);
  });
});
var _default = {};
exports.default = _default;